/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   clean_exit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mjuffard <mjuffard@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
<<<<<<< HEAD:srcs/exec/clean_exit.c
/*   Created: 2024/03/08 03:01:13 by mjuffard          #+#    #+#             */
/*   Updated: 2024/03/08 03:34:19 by mjuffard         ###   ########lyon.fr   */
=======
/*   Created: 2024/03/05 16:33:08 by lrio              #+#    #+#             */
/*   Updated: 2024/03/08 16:30:44 by lrio             ###   ########.fr       */
>>>>>>> 90dd373c91c02c5c89b4c4b4ab6de2c8aa2c1190:srcs/main.c
/*                                                                            */
/* ************************************************************************** */

#include "exec.h"
#include <errno.h>
#include <stdio.h>

<<<<<<< HEAD:srcs/exec/clean_exit.c
void	clean_exit(t_tree *tree, t_vector *fd_in, t_vector *fd_out, int status)
{
	perror(((t_cmd *)tree->structur)->arg[0]);
	ft_clean_tree(tree);
	close_vector_fd(fd_in);
	close_vector_fd(fd_out);
	exit(status);
}
=======
int	main(/*int argc, char **argv, char **env*/)
{
	t_tree *tree;
//	(void)argc;
//	(void)argv;
//	(void)env;
	tree = prompt();
	while(1)
	{
		tree = prompt();
		(void)tree;
		//free;
	}
}
>>>>>>> 90dd373c91c02c5c89b4c4b4ab6de2c8aa2c1190:srcs/main.c
